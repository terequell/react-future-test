{"version":3,"sources":["Table/Tableelement.jsx","OtherComponents/Paginator.jsx","Forms/SearchForm.jsx","OtherComponents/ExtendInfo.jsx","Forms/AddNewUserForm.jsx","Table/Tabledata.jsx","App.js","serviceWorker.js","index.js","Styles.module.css"],"names":["Tableelement","user","setCurrentUser","onClick","id","firstName","lastName","email","phone","Paginator","props","useState","currentPage","setCurrentPage","pagesArray","pagesCount","Math","ceil","countRows","rowsPerPage","i","push","map","el","onChangeCurrentUsers","className","styles","current__page","page__element","SearchForm","currentInput","setCurrentInput","Form","onSubmit","e","preventDefault","submitForm","inline","FormControl","type","placeholder","value","onChange","target","Button","variant","ExtendInfo","currentUser","description","address","streetAddress","city","state","zip","AddNewUserForm","addNewUser","setValidated","currentForm","setCurrentForm","event","form","currentTarget","checkValidity","stopPropagation","Row","Group","as","Col","controlId","Label","Control","required","parseInt","Tabledata","data","setData","isLoading","setIsLoading","currentKit","setCurrentKit","currentUsers","setCurrentUsers","dir","col","sortState","setSortState","searchData","setSearchData","addUserFlag","setAddUserFlag","isError","setIsError","useEffect","axiosData","a","dataKit","axios","response","length","onSortTable","nameCol","slice","sort","b","pageNumber","leftBorder","rightBorder","Spinner","animation","Table","striped","bordered","filter","toString","includes","checkSearch","App","setDataKit","onChooseDataKit","buttons__block","button__kit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fdbd6eb2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Tableelement = ({user, setCurrentUser}) => {\r\n   return (\r\n      <tr onClick = {() => setCurrentUser(user)}>\r\n         <td>{user.id}</td>\r\n         <td>{user.firstName}</td>\r\n         <td>{user.lastName}</td>\r\n         <td>{user.email}</td>\r\n         <td>{user.phone}</td>\r\n      </tr>\r\n   )\r\n}\r\n\r\nexport default Tableelement","import React, { useState } from 'react'\r\nimport styles from '../Styles.module.css'\r\n\r\nconst Paginator = (props) => {\r\n   const [currentPage, setCurrentPage] = useState(1)\r\n   const pagesArray = []\r\n\r\n   let pagesCount = Math.ceil(props.countRows / props.rowsPerPage)\r\n\r\n   for (let i = 1; i <= pagesCount; i++) {\r\n      pagesArray.push(i)\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         {pagesArray.map(el => <span onClick = {() => {props.onChangeCurrentUsers(el); setCurrentPage(el)}} className = {el === currentPage ? styles.current__page : styles.page__element}>{el}</span>)}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Paginator","import React, { useState } from 'react'\r\nimport { Form, Button, FormControl } from 'react-bootstrap'\r\nimport styles from '../Styles.module.css'\r\n\r\nconst SearchForm = (props) => {\r\n   const [currentInput, setCurrentInput] = useState('')\r\n\r\n   const submitForm = (e) => {\r\n      e.preventDefault()\r\n      props.submitForm(currentInput)\r\n   }\r\n\r\n   return (\r\n      <Form onSubmit = {(e) => submitForm(e)} inline>\r\n         <FormControl type=\"text\" placeholder=\"Type your request here\" className=\"mr-sm-2\" value = {currentInput} onChange = {(e) => setCurrentInput(e.target.value)}/>\r\n         <Button variant=\"dark\" type = 'submit'>Search</Button>\r\n      </Form>\r\n   )\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\n\r\nconst ExtendInfo = ({currentUser}) => {\r\n   return (\r\n      <div>\r\n         <p>You'd choosen user <b>{currentUser.firstName} {currentUser.lastName}</b></p>\r\n         <p>Description: {currentUser.description}</p>\r\n         <p>Address: <b>{currentUser.address.streetAddress}</b></p>\r\n         <p>City: <b>{currentUser.address.city}</b></p>\r\n         <p>Province/state: <b>{currentUser.address.state}</b></p>\r\n         <p>Postcode: <b>{currentUser.address.zip}</b></p>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ExtendInfo","import React, { useState } from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\n\r\nconst AddNewUserForm = ({addNewUser}) => {\r\n   const [validated, setValidated] = useState(false)\r\n\r\n   const [currentForm, setCurrentForm] = useState({id: '', firstName: '', lastName: '', email: '', phone: '', address: '', description: ''})\r\n   \r\n   const handleSubmit = event => {\r\n      const form = event.currentTarget;\r\n      event.preventDefault();\r\n      if (form.checkValidity() === false) {\r\n        event.stopPropagation();\r\n      }\r\n      setValidated(true)\r\n      addNewUser(currentForm)\r\n      setCurrentForm({...currentForm, id: '', firstName: '', lastName: '', email: '', phone: ''})\r\n    };\r\n   return (\r\n      <Form onSubmit = {handleSubmit}>\r\n         <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n               <Form.Label>id</Form.Label>\r\n               <Form.Control required value = {currentForm.id} onChange = {(e) => setCurrentForm({...currentForm, id: parseInt(e.target.value)})} type=\"number\" placeholder=\"Enter id\" />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGridPassword\">\r\n               <Form.Label>firstName</Form.Label>\r\n               <Form.Control required value = {currentForm.firstName} onChange = {(e) => setCurrentForm({...currentForm, firstName: e.target.value})} type=\"text\" placeholder=\"Enter firstName\" />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n               <Form.Label>lastName</Form.Label>\r\n               <Form.Control required value = {currentForm.lastName} onChange = {(e) => setCurrentForm({...currentForm, lastName: e.target.value})} type=\"text\" placeholder=\"Enter lastName\" />\r\n            </Form.Group>\r\n         </Form.Row>\r\n         <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n               <Form.Label>email</Form.Label>\r\n               <Form.Control required value = {currentForm.email} onChange = {(e) => setCurrentForm({...currentForm, email: e.target.value})} type=\"email\" placeholder=\"Enter email\" />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n               <Form.Label>phone</Form.Label>\r\n               <Form.Control required value = {currentForm.phone} onChange = {(e) => setCurrentForm({...currentForm, phone: e.target.value})} type=\"tel\" placeholder=\"Enter phone\" />\r\n            </Form.Group>\r\n         </Form.Row>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n         Submit\r\n      </Button>\r\n   </Form>\r\n   )\r\n}\r\n\r\nexport default AddNewUserForm","import React, { useState, useEffect } from 'react'\r\nimport { Table, Spinner, Button } from 'react-bootstrap'\r\nimport Tableelement from './Tableelement'\r\nimport axios from 'axios'\r\nimport Paginator from '../OtherComponents/Paginator'\r\nimport SearchForm from '../Forms/SearchForm'\r\nimport ExtendInfo from '../OtherComponents/ExtendInfo'\r\nimport AddNewUserForm from '../Forms/AddNewUserForm'\r\n\r\nconst Tabledata = (props) => {\r\n   const [data, setData] = useState([])\r\n   const [isLoading, setIsLoading] = useState(false)\r\n   const [currentKit, setCurrentKit] = useState(null)\r\n   const [currentUsers, setCurrentUsers]  = useState([])\r\n   const [sortState, setSortState] = useState({dir: true, col:null})\r\n   const [searchData, setSearchData] = useState(null)\r\n   const [currentUser, setCurrentUser] = useState(null)\r\n   const [currentPage, setCurrentPage] = useState(1)\r\n   const [addUserFlag, setAddUserFlag] = useState(false)\r\n   const [isError, setIsError] = useState(false)\r\n\r\n   const rowsPerPage = 32\r\n\r\n   useEffect(() => {\r\n      const axiosData = async () => {\r\n         try {\r\n         setCurrentKit(props.dataKit)\r\n         setIsLoading(true)\r\n         const response = await axios(props.dataKit)\r\n         setData(response.data)\r\n         setIsLoading(false)\r\n         }  \r\n         catch (error) {\r\n            setIsError(true)\r\n         }  \r\n      }\r\n      if (props.dataKit !== currentKit) {\r\n         setIsError(false)\r\n         axiosData()\r\n      }  \r\n      data.length > (rowsPerPage + 1) ? onChangeCurrentUsers(currentPage) : setCurrentUsers([...data])\r\n   }, [data, props.dataKit])\r\n\r\n   const onSortTable = (nameCol) => {\r\n      if (sortState.dir || nameCol !== sortState.col) {\r\n         setCurrentUsers(currentUsers.slice(0).sort((a,b) => a[nameCol] > b[nameCol] ? 1 : -1))\r\n         setSortState({...sortState, dir: false, col:nameCol})\r\n      }  \r\n      else {\r\n         setCurrentUsers(currentUsers.slice(0).sort((a,b) => a[nameCol] > b[nameCol] ? -1 : 1))\r\n         setSortState({...sortState, dir: true, col:nameCol})\r\n      }\r\n   }\r\n\r\n   const onChangeCurrentUsers = (pageNumber) => {\r\n      setCurrentPage(pageNumber)\r\n      let leftBorder = rowsPerPage * (pageNumber - 1)\r\n      let rightBorder = rowsPerPage * pageNumber\r\n\r\n      setCurrentUsers(data.slice(0).slice(leftBorder, rightBorder))\r\n   }\r\n\r\n   const checkSearch = (el) => {\r\n      if (searchData) {\r\n         // eslint-disable-next-line eqeqeq\r\n         return el.id.toString().includes(searchData) || el.firstName.toString().includes(searchData) || el.lastName.toString().includes(searchData) || el.email.toString().includes(searchData) || el.phone.toString().includes(searchData)\r\n      }\r\n      else return true\r\n   }\r\n\r\n   const addNewUser = (user) => {\r\n      setData([...data, user])\r\n   }\r\n\r\n   return (\r\n      isLoading ? (isError ? <p>Something went wrong. Please, refresh page or connect with developers.</p> : <Spinner animation=\"border\"/>) \r\n      :<div>\r\n         <SearchForm submitForm = {setSearchData}/>\r\n         <Button variant = 'primary' onClick = {() => setAddUserFlag(!addUserFlag)}>Add new user</Button>\r\n         {addUserFlag ? <AddNewUserForm addNewUser = {addNewUser}/> : null}\r\n         {data.length > rowsPerPage ? <Paginator countRows = {data.length} rowsPerPage = {rowsPerPage} onChangeCurrentUsers = {onChangeCurrentUsers}/> : null} \r\n         <Table striped bordered>\r\n            <thead>\r\n               <tr>\r\n                  <th onClick = {() => onSortTable('id')}>id {sortState.col === 'id' ? (sortState.dir ? '↓' : '↑') : null }</th>\r\n                  <th onClick = {() => onSortTable('firstName')}>firstName {sortState.col === 'firstName' ? (sortState.dir ? '↓' : '↑') : null }</th>\r\n                  <th onClick = {() => onSortTable('lastName')}>lastName {sortState.col === 'lastName' ? (sortState.dir ? '↓' : '↑') : null }</th>\r\n                  <th onClick = {() => onSortTable('email')}>email {sortState.col === 'email' ? (sortState.dir ? '↓' : '↑') : null }</th>\r\n                  <th onClick = {() => onSortTable('phone')}>phone {sortState.col === 'phone' ? (sortState.dir ? '↓' : '↑') : null }</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {currentUsers.slice(0)\r\n                  .filter(el => checkSearch(el))\r\n                  .map(el => <Tableelement  setCurrentUser = {setCurrentUser} user = {el}/>)}\r\n            </tbody>\r\n         </Table>\r\n         {currentUser ? <ExtendInfo currentUser = {currentUser}/> : null}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Tabledata","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabledata from './Table/Tabledata'\nimport { Button } from 'react-bootstrap';\nimport styles from './Styles.module.css'\n\nfunction App() {\n  const [dataKit, setDataKit] = useState(null)\n\n  const minDataUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n  const maxDataUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n\n  const onChooseDataKit = (dataKit) => {\n    setDataKit(dataKit)\n  }\n\n  return (\n    <div>\n      <h4>Choose your datakit:</h4>\n      <div className = {styles.buttons__block}>\n        <Button onClick = {() => onChooseDataKit(minDataUrl)} variant=\"primary\" className = {styles.button__kit}>Small data kit</Button>\n        <Button onClick = {() => onChooseDataKit(maxDataUrl)} variant=\"primary\" className = {styles.button__kit}>Large data kit</Button>\n      </div>\n      {dataKit ? <Tabledata dataKit = {dataKit}/> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons__block\":\"Styles_buttons__block___VBD4\",\"button__kit\":\"Styles_button__kit__1L-PB\",\"page__element\":\"Styles_page__element__pK4pQ\",\"current__page\":\"Styles_current__page__3DH0O\"};"],"sourceRoot":""}